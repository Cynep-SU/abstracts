#+TITLE: Основы проектирования баз данных
#+AUTHOR: Панков Вася
[[file:Лабораторные%20работы/][Лабораторные работы]]

* Основные понятия и определения

*Информация* - любые сведения о каком-либо событии, процессе, объекте.

*Данные* - это информация, предоставленная в опр. виде, позволяющем
автоматизировать её сбор, хранение и дальнейшую обработку человеком или
информационным средством.

Основные направления вычислительной техники:

- Первое направление - применение вычислительной техники для задач
  которые сложно или невозможно посчитать вручную

- Второе направление - применение вычислительной техники автоматически.

*Информационная система* - программный комплекс, функции которого
состоят в поддержке надёжного хранения информации в памяти компьютера,
выполнении специфических для данного приложения преобразований
информации и/или вычислений, предоставлении пользователям удобного и
легко осваиваемого интерфейса.

*Информационная система* - это система, реализующая сбор, хранение,
обработку, манипулирование данными, функционирующая на основе ЭВМ и
других технических средств обработки данных, и включ. соответствующее ПО
и обслуживающий персонал

*Предметная область* - это отражение в БД совокупность объектов
реального мира с их связями, относящихся к некоторой области знаний и
имеющих практическую ценность для пользователей.

*Объект* - элемент информационной системы, информацию о котором мы
сохраняем.

*Класс объектов* - совокупность объектов, обладающих одинаковым набором
данных.

Каждый объект имеет набор опр. свойств. Атрибут - это информационное
отображение свойств объекта.

*Банк данных(БнД)* - /система из нескольких баз данных/ или это система
специально организованных данных, программных языковых, организационных
и технических средств, предназначенных для централизованного накопления
и коллективного многоцелевого использования данных.фф

В состав БнД входят:

- БД

- СУБД

- Словарь данных

- ВС (Программные и технические средства)

- Администратор базы данных

- Обученный персонал

*База данных* - это именновая совокупность данных, отражающая состояние
объектов и их отношений в рассматриваемой предметной области.

СУБД - Система управления баз данных - совокупность программны

* Структура и функции банков данных
    :PROPERTIES:
    :CUSTOM_ID: структура-и-функции-банков-данных.
    :END:
** Функции банков(баз данных)
Функции банков(баз) данных:

- Ввод, просмотр и редактирование данных

- Хранение данных и их защиты

- Изменение хранимых данных

- Поиск, сортировка и отбор данных по запросам пользователей

- Отображение результатов в требуемом виде

В структуре данных выделяют следующие компоненты:

- Информационная база

- Лингвистические средства

- Программные средства

- Технические средства нормативные документы

- Нормативно-методическое обеспечение и организационно-административные
  подсистемы

*Информационная база* - это данные отражающие состояние опрю предметной
области и используемой ИС.\\
Состоит из двух компонентов:

- Метаданные - описание данных

- Коллекция записей - собственно данных

Различают три уровня предоставления данных: внешний, концептуальный и
внутренний.

[[file:Frame 1.png]]

*Внешний уровень* - Каждая группа пользователей выделяет в моделируемой
предметной области, общей для всей организации, те объекты, атрибуты и
связи, которые ей интересны. Выражая их в наиболее удобной для себя
форме, она формирует своё пользовательское представление, причём одни и
те же данные могут отображаться в разных пользовательских
представлениях.

*НОРМАЛИЗАЦИЯ(ДАННЫЕ НЕ ДОЛЖНЫ ПОВТОРЯТЬСЯ)*

Концептуальный (логический) уровень проектирования БД включает анализ
информационных потребностей пользователей и определение нужных элементов
данных. Таким образом, концептуальная схема - это единое логическое
описание всех элементов данных и отношений между ними, логическая
структура БД.\\
Для каждой БД имеется только одна концептуальная схема содержащая:

- Объекты и их атрибуты

- Связи между объектами

- Ограничения накладываемые на данные

- Семантическую информацию о данных

- Обеспечение безопасности и поддержки целостности данных

Не содержит информации о хранении.

Внутренний (физический) уровень. Внутренняя схема описывает физическую
реализацию БД и предназначена для достижения максимальной
производительности и обеспечения экономного использования дискового
пространства.\\
На внутреннем уровне храниться следующая информация:

- Распределении дискового пространства для хранения данных и индексов

- Описание подробностей сохранения записей

- Сведения о размещении записей

- Сведении о сжатии данных и выбранных методах их шифрования

** Лингвистические средства
    :PROPERTIES:
    :CUSTOM_ID: лингвистические-средства
    :END:
Многоуровневое представление БД предполагает соответствующие описания
данных на каждом уровне и согласование их на разных уровнях. Для этого в
состав СУБД включаются специальные языки называемые языками баз данных:

1. Язык определения данных ЯОД (DDL - Data Definitional Language) В
   ранних СУБД это язык определения БД

2. Язык манипулирования данными - ЯМД(DML - Data Manipulation Language)

*Язык определения данных* - описательный язык с помощью которого
описывается предметная область: именуются объекты, определяются их
свойства и связи между объектами. Он используется главным образом для
определения логической структуры базы данных, т. е. структуры БД, какой
она представляется пользователю. Результатом компиляции ЯОД является
набор таблиц, хранимый в системном каталоге, в котором содержатся
метаданные, т. е. той структуры БД, какой она представляется
пользователю.

 

Язык манипулирования данными содержит набор операторов манипулирования
данными. Гибкость управления БД определяется множеством операций,
разрешённых над данными.

 

Множество операций можно классифицировать следующая образом:

1. Операции селекции

2. Действия над данными

   - Выборка-чтение записи из БД

   - Включение - Ввод записи в БД с установкой её связей

   - Удаление - исключение записи из БД с установкой новых связей

   - Модификация - изменение содержимого записи и коррекция связей при
     необходимости

ЯМД:

- процедурный

- декларативный(непроцедурный)

Реляционные СУБД поддерживают следующие непроцедурные ЯМД:

- SQL(Structured QueryLanguage)

- QBE (Query-By-Example)

** Программные средства
    :PROPERTIES:
    :CUSTOM_ID: программные-средства
    :END:
В состав комплекса программных средств, осуществляющих обработку данных
и управление этой обработкой входят следующие компоненты:

- Ядро - обеспечивает управление данными во внешней и оперативной
  памяти, а также протоколирование изменений

- Процессор языка базы данных - обеспечивает обработку и оптимизацию
  запросов на выборку и изменение данных

- Подсистема поддержки программных вызовов - обслуживает прикладные
  программы управления программами

- Сервисные программы

** Технические средства
    :PROPERTIES:
    :CUSTOM_ID: технические-средства
    :END:
Большинство использует сервера баз данных

Устройства ввода/вывода - узкое место

Для повышения надёжности хранения данных используют специализированные
дисковые подсистемы - RAID

** Пользователи баз данных
    :PROPERTIES:
    :CUSTOM_ID: пользователи-баз-данных
    :END:
Конечные пользователь, как правило, имеют дело со внешним интерфейсом
поддерживаемым СУБД. Но есть администратор БД(АБД) который:

- Несет ответственность за проектирование и общее управление БД

- Решает вопросы, связанные с размещением БД в памяти

- Выбирает стратегию доступа к данным и устанавливает права доступа
  другим пользователям

- Организует

Базы данных:

- Форма представления информации

  - Визуальные

  - Аудио

  - Медиа

- Тип хранимой информации

  - Факторографические

  - Лексикографические

  - Документальные

    - Библиографические

    - Реферативные

    - Полнотекстовые

- Степень неизменности

  - Архивные

  - Справочные

  - Работы с транзакциями

- Степень структурированности

  - Неструктурированные

  - Частично структурированные

  - Структурированные

    - Иерархические

    - Сетевые

    - Реляционные

- Количество одновременно работающих

  - Однопользовательские

  - Многопользовательские

- Способ организации информации

  - Локальные

  - Централизованные

  - Распределённые

БД работы с транзакциями - база данных, в которой данные могут
измениться в произвольный момент в результате выполнения транзакции.

Транзакция - группа последовательных операций с базой данных, которая
представляет собой логическую единицу работы с данными.

Транзакцией называется запрос на изменение данных, хранящихся в бд,
сформированный пользователем бд или автоматически.

По степени структурирования информации:

- Документированные

- Структурированные

Документированной - называется БД, рассчитанная на работу
непосредственно с неструктурированными или слабо структурированными
данными.

Структурированная - называется БД, работающая с жестко
структурированными данными.

База данных:

- Локальная(персональная)

- Общая(интегрированная)

 

Распределённая БД - разные части БД, расположены на разных компьютерах.

Централизованная БД - называется БД, в которой все данные хранятся в
единой БД и представлены в одном экземпляре.

По степени доступности:

- общедоступные

- с ограниченным доступом

ПО языкам общения СУБД делятся на открытые, замкнутые и смешанные.

По мощности СУБД:

- настольные Для них характерны невысокие требования к тех. средствам,
  ориентация на конечного пользователя

- корпоративные

- Промежуточные

 

Функции СУБД

Система управления базами данных (СУБД) - совокупность программных и
лингвистических средств общего и специального назначения, обеспечивающих
управление созданием и использованием БД.

- управление данными во внешней памяти - эта функция включает
  обеспечение необходимых структур внешней памяти как для хранения
  данных, непосредственно входящих в БД, так для служебных целей,
  например для убыстрения доступа к данным.

- управление буферами оперативной памяти - СУБД обычно работают с БД
  значительного размера, который существенно больше доступного объема
  ОЗУ. При обращении к любому элементу данных будет производить обмен с
  внешней памятью со скоростью устройства внешней памяти. Практически
  единственным способом реального увеличения этой скорости является
  буферизация данных в ОЗУ.

- управление транзакциями

- журнализация и восстановление БД после сбоев

- мягкие сбои

- жесткие сбои

Примерами программных сбоев могут быть: аварийное завершение работы СУБД
и тп.

Журнал - это особая часть БД, недоступная пользователем БД, в которую
поступают записи обо всех изменениях основной части БД.

- поддержание языков БД

** Классификация СУБД
    :PROPERTIES:
    :CUSTOM_ID: классификация-субд
    :END:
- по языкам

  - Открытые(используют универсальные языки программирования)

  - Замкнутые(имеют собственные языки общения с пользователем)

  - Смешанные

- по числу уровней в архитектуре

  - одноуровненвые (физ. модель)

  - двухуровневая(физ. + концептуальная)

  - трёхуровневая(физ + концепт + внешние модели)

- по функциям

  - информационные(допускают хранение и доступ к информации)

  - операционные(позволяют более сложную обработку информации)

- по сфере применения

  - универсальные

  - специализированные

- по типам данных

  - с фиксированным набором типов данных

  - расширяемые СУБД

- по модели данных

  - иерархические

  - сетевые

  - реляционные

  - ОО

- по местоположению отдельных частей СУБД

  - локальные СУБД

  - сетевые:

    1. файл-серверные

    2. клиент-серверные

  - распределенные СУБД

- по способу доступа СУБД к базе данных

  - файл-серверные

  - клиент-серверные

 

Файл-сервер(передача файлов БД для обработки):

- Хранение
- Обработка
- Рабочие станции

Предполагается выделение одной из машин сети в качестве центральной -
сервер файлов. Ядро СУБД располагается на каждом клиентском компьютере.
Синхронизация чтений и обновлений данных осуществляется посредством
файловых блокировок. Файлы БД передаются на рабочие станции, согласно
запросам пользователя.

Плюсы:

- Малая нагрузка на процессор БД Минусы:
- Большая нагрузка на сеть
- При большой интенсивности доступа к одним и тем-же данным
- Вся тяжесть вычислительной работы ложится на компьютер клиента
- Проверки корректности реализуются, а программе клиента
- внесение изменений в БД

** Клиент-Серверные СУБД
    :PROPERTIES:
    :CUSTOM_ID: клиент-серверные-субд
    :END:
Клиент-серверные СУБД, в отличие от файл-серверных, обеспечивают
разграничение доступа между пользователями и мало загружают сеть в
клиентские машины. Сервер хранит и выполняет основную обработку.

Плюсы:

- большинство вычислительных процессов происходит на сервере, что
  снижает требования к вычислительным мощностям клиента
- снижается сетевой трафик за счёт посылки сервером клиенту только тех
  данных, которые он запрашивал
- БД на сервере представляет собой как правило единый файл, в котором
  содержатся таблицы, ограничения целостности и другие компоненты БД:
  взломать, похитить или испортить такую БД сложнее
- существенно увеличивается защищённость от ввода неправильных значений
- сервер отслеживает уровни доступа для каждого пользователя и блокирует
  попытки выполнения неразрешённых для пользователя операций
- сервер реализует управление изменениями данных и предотвращает попытки
  одновременного изменения одних и тех же данных

Минусы: - большие вычислительные ресурсы, потребляемые сервером - сам
факт существования СУБД(что плохо для локальных программ)

* Типы моделей данных
   :PROPERTIES:
   :CUSTOM_ID: типы-моделей-данных
   :END:
** Модель данных
*Модель данных* - совокупность структур данных и операций их обработки.
Три основных типа моделей данных:

- иерархическая -- состоит из объектов с указателями от род. объектов к
  потомкам, соединяя вместе связанную информацию
  - Узел - совокупность атрибутов данных, описывающих некоторый объект
  - Уровень - положение или ранг
  - Связь - функциональная зависимость между объектами Дерево Основные
    операции баз данных - переход от одного дерева к другому, поиск
    Плюсы:
    - простота
- сетевая Похожа ни иерархическую. В сетевых БД имеются указатели в
  обоих направлениях, которые соединяют родственную информацию. Логика
  процедуры выборки данных зависит от физической организации этих
  данных. Операции манипулирования данными:
  - Поиск записи в БД
  - Удаление текущей записи
  - Обновление текущей записи
  - Включение записи в связь
  - Исключение записи из связи
  - Изменение связей и т.д. Плюсы:
  - Очень высокая скорость поиска и возможность адекватно представлять
    многие задачи в самых разных предметных областях
  - сетевая модель представляет большие возможности в смысле
    допустимости образования произвольных связей Минусы:
  - высокая сложность и жесткость схемы и БД, построенной на её основе
  - ослаблен контроль целостности связей и вследствие допустимости
    установление произвольных связей между записями
- реляционная Эти модели характиризуются простотой структуры
- объектно-ориентированная
- объектно-реляционная

Дз - СОСТВИТЬ ТРИ МОДЕЛИ ДАННЫХ ПО ПРЕДМЕТНЫМ ОБЛАСТЯМ

Основные определения

#+caption: img_4.png
[[file:img_4.png]]

Таблица (отношение)- регулярная структура, состоящая из конечного набора
однотипных записей. Атрибут (столбец, поле)- это информационное
отображение свойств объекта (заголовок столбца).

Кортеж (запись, строка) данных - это совокупность значений связанных
элементов данных(или другими словами это поименованная совокупность
полей). Каждая запись одной таблицы состоит из конечного числа полей,
причем конкретное поле каждой записи одной таблицы может содержать
данные только одного типа.

Элемент данных - действительные данные

Ключевой элемент данных - элемент, по которому можно однозначно
определить значения других элементов данных.

Тип данных - характеризует вид хранящихся данных.

Домен - набор значений элементов данных одного типа, отвечающий
поставленным условиям.

Представление - сохраняемый в базе данных именованный запрос на выборку
данных (из одной или нескольких таблиц).

Индекс (англ. index) --- объект базы данных, создаваемый с целью
повышения производительности выполнения запросов. Индекс формируется из
значений одного или нескольких столбцов таблицы и указателей на
соответствующие строки таблицы и, таким образом, позволяет находить
нужную строку по заданному значению.

** Проектирование баз данных
    :PROPERTIES:
    :CUSTOM_ID: проектирование-баз-данных
    :END:
При рассмотрении требований конечных пользователей необходимо принимать
во внимание следующее:

1. База данных должна содержать информацию выбранной предметной области
2. Получаемая информация должна по структуре и содержанию
   соответствовать решаемым задачам
3. База данных должна обеспечивать получение требуемых данных за
   приемлемое время
4. База данных должна удовлетворять выявленным и вновь возникающим
   требованиям конечных пользователей
5. База данных должна легко расширяться при реорганизации и расширении
   предметной области
6. База данных должна легко изменяться при изменении программной и
   аппаратной сети
7. Данные до включения в базу данных должны проверяться на достоверность
8. Загруженные в базу данные должны оставаться корректными
9. Доступ к данным, размещаемым в базе данных, должны иметь только лица
   с соответствующими полномочиями.

Этапы проектирования базы данных:

1. Определение цели создания базы данных
2. Определение таблиц, которые должна содержать база данных
3. Определение необходимость в таблице полей
4. Нормализация отношений
5. Задание первичных ключей
6. Определение связей между таблицами
7. Определения требования целостности
8. Тестирование БД и обновление структуры базы данных
9. Добавление данных и создание других объектов баз данных

* Язык SQL
   :PROPERTIES:
   :CUSTOM_ID: язык-sql
   :END:
SQL - structure query language / структурированный язык запросов
** Достоинства и недостатки:
    :PROPERTIES:
    :CUSTOM_ID: достоинства-и-недостатки
    :END:
Достоинства:

- независимость от конкретной СУБД
- Наличие стандартов
- Декларативность
- Возможность создания интерактивных запросов
- Возможность программного доступа к БД

Недостатки:

- неполное соответствие реляционной модели
- сложность языка sql
- Отступления от стандартов
- Сложность работы с иерархическими структурами

Используются две формы языка sql:

1. Интерактивный - используется для задания SQL-запросов пользователем
2. Встроенный - состоит из команд SQL, встроенных внутрь программ,
   написанных на каком-то другом языке

Язык SQL позволяет пользователю выполнять след. набор операций:

- создание в базе данных новой таблице
- добавление в таблицу новых записей
- изменение записей
- удаление записей
- выборка записей из одной или нескольких таблиц
- изменение структур таблиц

Каждая таблица описывается в виде перечисления своих полей(столбцов
таблицы) с указанием:

1. типа хранимых в каждом поле значений
2. связей между таблицами
3. информации, необходимой для построения индексов

** Типы данных в SQL
    :PROPERTIES:
    :CUSTOM_ID: типы-данных-в-sql
    :END:
Данные - это информация, хранимая в БД в виде одного из типов. Тип
данных - определяет формат внутреннего хранения

| Тип данных                            | Объявления                                                           | Описание                                                                                                                                                                                                                   | Размер              |
|---------------------------------------+----------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------|
| Символьный                            | *CHAR(size)                                                          | строка символов фиксированной длины размером size символов                                                                                                                                                                 | От 1 до 255         |
|                                       | *VARCHAR (size) или CHARACTER VARYING (size) или CHAR VARYING (size) | строка символов переменной длины максимальным размером до size символов. Если длина строки не указана явно, она равна 1 символу                                                                                            | До 2000 символов    |
| Числовые целые                        | *INTEGER                                                             | Длинное целое число в диапазоне от -2 147 483 648 до 2 147 483 647                                                                                                                                                         | 4 байта             |
|                                       | *SMALLINT                                                            | Короткое целое число в диапазоне от -32 768 до 32 767                                                                                                                                                                      | 2 байта             |
|                                       | *DECIMAL(точность[,масштаб])                                         | десятичное число с фиксированной точкой. Точность определяет количество значащих цифр в числе. Масштаб указывает максимальное число цифр справа от точки.                                                                  | 17 байт             |
|                                       | *NUMERIC(точность[,масштаб\                                          | десятичное число с фик- сированной точкой, такое же, как и DECIMAL)                                                                                                                                                        | 17 байт             |
| Числовые с плавающей точкой           | *FLOAT [точность]                                                    | Значения двойной точности с плавающей запятой в диапазоне от -1,79769313486232E308 до -4,94065645841247E-324 для отрицательных значений и от 4,94065645841247E-324 до 1,79769313486232E308 для положительных значений и 0. | 8 байт              |
|                                       | *REAL[точность]                                                      | Значения обычной точности с плавающей запятой в диапазоне от -3,402823E38 до -1,401298E-45 для отрицательных значений, от 1,401298E-45 до 3,402823E38 для положительных значений и 0.                                      | 4 байта             |
|                                       | *DOUBLE PRECISION[точность]                                          | тип данных с определенной в реализации точностью большей, чем определенная в реализации точность для REAL.                                                                                                                 | 8 байт              |
| Битовый                               | BIT(n)                                                               | Используется для определения битовых строк, т.е. последовательности двоичных цифр (битов), каждая из которых может иметь значение 0 или 1. Строка битов постоянной длины.                                                  | 1 байт на символ    |
|                                       | BIT VARYING(n)                                                       | строка битов переменной длины                                                                                                                                                                                              |                     |
| Дата/время                            | *DATE                                                                | Для представления даты и времени. Даты и время, относящиеся к годам с 100 по 9999. Астрономическая дата.                                                                                                                   | 8 байт              |
|                                       | *TIME                                                                | Астрономическое время                                                                                                                                                                                                      | 8 байт              |
|                                       | * TIMESTAMP (точность)                                               | Для совместного хранения даты и времени. Параметр точность задает количество дробных десятичных знаков, определяющих точность сохранения значения в поле SECOND (секунды).                                                 | 8 байт              |
| Интервал                              | INTERVAL                                                             | для представления периодов времени                                                                                                                                                                                         | 8 байт              |
| Неопределённые или пропущенные данные | *NULL                                                                | Для обозначения отсутствующих, пропущенных или неизвестных значений атрибута                                                                                                                                               |                     |
|                                       | TEXT (для Access) MEMO                                               | 2 байта на символ (для поля Memo)                                                                                                                                                                                          | От 0 до 2,14 Гбайт. |
|                                       | IMAGE (для Access)                                                   | Используется для объектов OLE                                                                                                                                                                                              | От 0 до 2,14 Гбайт  |
| счетчик                               | COUNTER(1,1) в mysql - INTEGER AUTO_INCREMENT                        |                                                                                                                                                                                                                            |                     |
| логический                            | BIT (проверить LOGICAL)                                              |                                                                                                                                                                                                                            |                     |
| денежный                              | MONEY                                                                | Типы данных, представляющие денежные (валютные) значения. Валютные или денежные данные не требуется заключать в одинарные кавычки От -922 337 203 685477,5808 до 922 337 203 685 477,5807                                  | 8 байт              |
|                                       | smallmoney                                                           | От -214 748,3648 до 214 748,3647                                                                                                                                                                                           | 4 байта             |

Примечания: 
1. * - определены стандартом
2. Величины len и dec(в отличие от size) не влияют на размер храниения данных в таблице, а только форматируется вывод.
3. Параметр __точность__ у типов FLOAT, REAL и DOUBLE PRECISION задаёт количество символов после мантисы.

** Составные части(компоненты) SQL
- интерактивный
- встроенный

| Название                          | Назначение                                                                                                                                                                                                                                                        | Команды                                                        |
|-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------|
| Язык определения данных(DDL)      | Для создания, изменения и удаления различных объектов баз данных(таблиц, индексов, пользоватлей, привелегий и т.д.) МОгут быть средства ограничения целостности данных, определения порядка структур из хрранения, описания элементов физ. уровня хранения данных | CREATE - создает объект БД, ALTER - изменение, DROP - удаления |
| Язык манипулирования данными      | Представляет возможность выборки из бд и её преобразования                                                                                                                                                                                                        | INSERT, UPDATE, DELETE                                         |
| Язык запросов(DQL)                |                                                                                                                                                                                                                                                                   |                                                                |
| Язык управления данными           |                                                                                                                                                                                                                                                                   |                                                                |
| Операторы управления транзакциями | позволяет управлять транзакциями базы данных                                                                                                                                                                                                                      | COMMIT, ROLLBACK, SAVEPOINT, SET TRANSACTION                   |

* Создание таблиц средствами языка SQL

#+begin_src sql
CREATE TABLE NAME(SMTH TYPE, SMTH2 TYPE);
#+end_src

EXAMPLE:
#+begin_src sql
CREATE TABLE STUDENT(ID INTEGER, SURNAME VARCHAR(60))
#+end_src

** Ограничения на множество допустимых значений
Описание таблицы может быть дополнено более сложными ограничениями, накладываемые на значения, которые могут быть вставлены в столбец или группу столбцов. 
Ограничения (Constraints - принуждение) являются частью определения таблицы.
Ограничения могут быть статическими, ограничевающее значения или диапазон значений вставляемых в столбец.
Ограничения могут определяться связью со значениями, находящимся в другой таблице, допуская, например вставку в столбец только тех значений, которые в данный момент содержатся в другом 
*** NOT NULL
НЕ пустое
*** UNIQUE
Уникальное
Кандидаты на ключевое поле
Можно использовать для всей таблицы, просто прописав это в к онце таблицы.
*** CHECK
Установка условий назначений

#+begin_src sql
CREATE TABLE STUDENT(ID INTEGER PRIMARY KEY, SURNAME VARCHAR(25) NOT NULL, STUIPEND INTEGER CHECK(STIPEND > 200)) 
#+end_src

*** DEFAULT 
Значение по умолчание

#+begin_src sql
CREATE TABLE STUDENT(ID INTEGER PRIMARY KEY, SURNAME VARCHAR(25) NOT NULL, STUIPEND INTEGER CHECK(STIPEND > 200), CITY CHAR(15) DEFAULT 'Москва') 
#+end_src

*** PRIMARY KEY

** Индексы 

#+begin_src sql
CREATE INDEX INDEX_NAME ON TABLE_NAME(NAME_COLUMN)
#+end_src
Удаление индекса не удаляет данные из таблицы

** Изменение структуры существующей таблицы(ALDER)
Изменение структуры существующей таблицы

#+begin_src sql
ALTER TABLE TABLE_NAMEE ADD COLUMN COLUMN_NAMEE VARCHAR(20)
#+end_src


Изменение типа данных для колоннок:

#+begin_src sql
ALTER TABLE TABLEname ALTER COLUMN COLUMNname TYPE(SIZE)
#+end_src

Удаление колонки:

#+begin_src sql
ALTER TABLE TABLEname DROP COLUMN COLUMNname
#+end_src

Для добавление внешних ключей:


** Удаление таблицы

#+begin_src sql
DROP TABLE NAMETABLE
#+end_src


#+begin_src sql
CREATE TABLE ТИПЫ_КРЕДИТНЫХ_КАРТ(Код_кредитной_карты COUNTER(1, 1) PRIMARY KEY, Название_карты VARCHAR(20));
#+end_src
* Запросы(Query)
Результатом запроса является виртуальная таблица

** SELECT

#+begin_src sql
SELECT COL_NAME FROM TABLE__NAME WHERE BOOLEAN ORDER BY DESC/ASC GROUP BY SMTH HAVING POST BOOLEAN
#+end_src

COL_NAME - колонка(колонки).

WHERE BOOLEAN - фильтрация по условию условие
ORDER BY DESC/ASC - порядок сортировки
GROUP BY - группировка по подмножествам
HAVING BOOLEAN - постфильтрация(фильтрация после проделанных операций).

Для того чтобы выбрать все столбцы в таблице, используют звёздочку "*".

#+begin_src sql
SELECT * FROM TAABLE
#+end_src

Для вывода нескольких, просто надо перечислить их через запятую.

Для исключение повторяющихся записей используется слов **DISTINCT**



*** WHERE
Это условие, пчел
- IN - значение присутствует в списке
  #+begin_src sql
  select * from exam_marks where marks in (4, 5);
  #+end_src
  NOT IN - просто с не
- LIKE
  находит значение по шаблону.
  - _ -  любой одиночный симвов
  - % - любые количестов _
  - [Список знаков] - любой симвов попадающий в указанной диапазон.
  - [!Список знаков] - не пункт выше.
  Для того чтобы символы выше не воспринимались как команды, используется \(\_ - не будет считататься шаблоном, а символом _)
- BETWEEN
  Вхождение значения в определенный диапазон.
  #+begin_src sql
  select * from subject where hour between 40 and 60;
  #+end_src
- IS NULL - проверка на NULL
*** Упорядочение выходных полей (ORDER BY)
Записи в таблицах реляционной базы данных не упорядочены.
 Оператор ORDER BY-  позволяет упорядочивать выводимые записи в соответствии со значениями одного или нескольких выбранных столбцов. При этом можно  задать возрастающую (ASC- ASCENDING-восходящий) или  убывающую (DESC-  DESCENDING- спускающийся) последовательность сортировки для каждого из столбцов. По умолчанию принята  возрастающая  последовательность  сортировки.
Для отбора определенного количества записей используют TOP n или PERCENT

- TOP n – возвращает записи, относящиеся к верхней или нижней части диапазона, заданного предложением ORDER BY,n - количество возвращаемых записей;
- PERCENT - возвращает  определенный процент записей из верхней или нижней части диапазона, заданного предложением ORDER BY.

Оператор ORDER BY в запросе всегда должен быть последним.

FIRST(столбец) - функция возвращает первое значение для выбранного столбца или столбцов таблицы.
LAST(столбец) - данная функция возвращает последнее значение для выбранного столбца или столбцов таблицы.

*** Агрегирование и групповые операции

1. COUNT - определяет количество строк или значений поля, выбранных посредством запроса и не являющихся NULL-значениями;
2. SUM - вычисляет арифметическую сумму всех выбранных значений данного поля;
3. AVG - вычисляет среднее значение для всех выбранных значений данного поля;
4. МАХ - вычисляет наибольшее из всех выбранных значений данного поля;
5. MIN - вычисляет наименьшее из всех выбранных значений данного поля.

Предложение GROUP BY (группировать по) позволяет группировать записи в подмножества, 
определяемые значениями какого-либо поля (полей), 
и применять агрегирующие функции уже не ко всем записям таблицы, 
а раздельно к каждой сформированной группе. 

#+begin_src sql
SELECT   STUDENT_ID, MAX(MARK) 
FROM EXAM_MARKS
GROUP BY STUDENT_ID;
#+end_src

*** Некоторые интересные вещи

\|| -  Конкатенация строк.

** Строковые функции
1. LOWER, UPPER, INITCAP - ну тут понятно
2. 
3. CONCAT(str1,str2...) -возвращает строку, созданную путем объединения строк  str1,str2....
   #+begin_src sql
   SELECT CONCAT(city, address) FROM vendors
   #+end_src
4. LPAD(str, len [, dop_str]) -возвращает строку str, дополненную слева строкой dop_str до длины len. . Если размер dop_str  меньше len, то при необходимости она дублируется. Если размер dop_str  больше len, то берутся только первые len ее символов. Если dop_str не указана,  то ее заменяют символы пробела.
   #+begin_src sql
   SELECT LPAD(city, 15, '.') FROM vendors;
   #+end_src
5. RPAD, аналогично, но справа
6. INSERT(str, pos, len, new_str) - втавка new_str в str
   #+begin_src sql
select INSERT(address, 1, 3, '  ') from vendors
   #+end_src
7. RTRIM, LTRIM, TRIM - удаление символов с нужной стороны, если символы не указаны.
8. LENGTH(str) - определние длины str
9. RIGHT(str, n), LEFT(str, n) - выдкляет из str n символов, с нужной стороны.
10. REPEAT(str, n) - повторяет str, n раз.
11. REPLACE(str, substr1, substr2) - в str заменяет все подстроки substr1, подстрокой substr2.
12. REVERSE(str)
13. CHR(x) - аналогичен питоновскому ord(x)
14. SUBSTR(str, p [,n]) - из str выделяет n символов, начиная с позиции p. 
    Если p не задано, то выделение начинается с начала строки str.
15. INSTR(str, str1 [,p [, n]]) - ищет подстроку str1 в str. 
    Возвращает позицию найденной подстроки. p - начальная позиция, 
    n - порядковый номер подстроки str1.

** Функции работы с числами
| Обозначение   | Описание                                                                                                                                                                       |
| ABS(X)        | $$ \mid X \mid $$                                                                                                                                                              |
| CEIL(X)       | наименьшее целое, которое не меньше аргумента                                                                                                                                  |
| FLOOR(X)      | наибольшее целое, которое не больше аргумента                                                                                                                                  |
| EXP(X)        | ex                                                                                                                                                                             |
| LN(X)         | натуральный логарифм                                                                                                                                                           |
| POWER(X, Y)   | возводит x в степень y;                                                                                                                                                        |
| ROUND(X [,Y]) | округление x до y разрядов справа от десятичной точки. По умолчанию y равно 0                                                                                                  |
| TRUNC(X [,Y]) | усекает x до у десятичных разрядов. Если у равно 0 (значение по умолчанию), то х усекается до целого числа. Если у меньше 0, от отбрасываются цифры слева от десятичной точки. |
| SQRT(X)       | квадратный корень                                                                                                                                                              |
| SIGN(X)       | возвращает -1 для отрицательных значений x и 1 для положительных                                                                                                               |
| ACOS(X)       | Арккосинус                                                                                                                                                                     |
| ASIN(X)       | арксинус                                                                                                                                                                       |
| ATAN(X)       | арктангенс                                                                                                                                                                     |
| COS(X)        | косинус                                                                                                                                                                        |
| SIN(X)        | синус                                                                                                                                                                          |
| TAN(X)        | тангенс                                                                                                                                                                        |




** Комментарии

#+begin_src sql
-- Это комментарий
SELECT * FROM users
#+end_src

#+begin_src sql
/*
----- Это тоже комментарий -----
*/
#+end_src




** Обновить/изменить значения строк – UPDATE

Команда UPDATE позволяет изменять/обновлять значения некоторых или всех полей в существующей строке/строках таблицы. 
Для указания конкретных столбцов, значения которых должны быть модифицированы, используется предложение SET.

#+begin_src sql
update TABLENAME SET COLUMNNAME = VALUE WHERE BOOLEAN
#+end_src 

Example:
#+begin_src sql
UPDATE UNIVERSITY1 
SET RATING = 200 
WHERE CITY = 'Москва'
#+end_src

** Удаление строк таблиц
#+begin_src sql
DELETE FROM TABLENAME WHERE BOOLEAN
#+end_src

** Добавление данных (INSERT)

#+begin_src sql
INSERT INTO TABLENAME VALUES(value1, value2, value3, value3);
#+end_src

** Объединение таблиц в запросе SELECT 

#+begin_src sql
SELECT column1, columntable2 FROM TABLE1, TABLE2
#+end_src

Мы фактически получаем декартовое произведение данных.

Для того чтобы получить нужное объединение мы должны создать необходимое условие, с помощью WHERE.

** Объединение таблиц с помощью JOIN.
